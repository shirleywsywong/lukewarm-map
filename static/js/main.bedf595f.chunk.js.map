{"version":3,"sources":["components/firebase.js","components/Header.js","components/Button.js","components/Scroll.js","components/Hover.js","components/Form.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","Component","Button","onClick","this","props","clickFn","Scroll","id","Hover","onMouseEnter","mouseEnterFn","onMouseLeave","mouseLeaveFn","Form","action","for","type","name","placeholder","required","onKeyUp","formTyping","value","Result","click","scrollThrough","scrollTime","toFixed","totalHoverCount","totalHoverTime","visit","avgClick","avgScrollThrough","avgScrollTime","exitMidPage","avgHoverCount","avgHoverTime","App","dataAnalysis","fbValuesArray","sessionArray","forEach","item","push","session","clickArray","visitArray","scrollCountArray","scrollTimeArray","readingArray","hoverCountArray","hoverTimeArray","addFn","array","reduce","total","num","clickCount","scrollCount","scrollTimeElapsed","didExitInScroll","hoverCount","hoverTimeElapsed","fbVisitTotal","fbClickTotal","fbScrollCountTotal","fbScrollElapsedTotal","fbScrollElapsedFormatted","Math","floor","fbHoverCountTotal","fbHoverElapsedTotal","fbHoverElapsedFormatted","avgFn","fbAverageClick","fbAverageScrollThrough","fbAverageScrollElapsed","fbAverageHoverCount","fbAverageHoverElapsed","i","length","setState","state","totalVisit","totalClick","clickCounter","isVisible","elem","coords","getBoundingClientRect","windowHeight","document","documentElement","clientHeight","topVisible","top","bottomVisible","bottom","middleVisible","showVisible","section","getElementById","currentSectionState","elapsedTimeArray","scrollElapsedArray","lastSectionState","scrollEntryTime","Date","now","scrollExitTime","elapsedTime","scrollSpanTotal","timeSpanCounter","totalScrollTime","totalScrollThrough","timeArray","mouseEnter","hoverEntryTime","mouseLeave","hoverExitTime","hoverElapsedTime","hoverElapsedArray","hoverSpanTotal","event","isTyped","keystrokeCount","target","console","log","visitCount","form","window","addEventListener","database","ref","e","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAYAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECIeS,E,iLAZX,OACE,gCACE,wBAAIC,UAAU,SAAd,gBACA,wBAAIA,UAAU,SAAd,cACA,wBAAIA,UAAU,SAAd,eACA,wBAAIA,UAAU,SAAd,oBACA,gD,GAVaC,aCYNC,E,iLARX,OACE,6BAASF,UAAU,iBACjB,4BAAQG,QAASC,KAAKC,MAAMC,SAA5B,mB,GANaL,aCoBNM,E,iLAjBX,OACE,6BAASP,UAAU,gBAAgBQ,GAAG,iBACpC,+CACA,ofACA,+gBACA,k0BACA,8pBACA,ysBACA,4lBACA,6nBACA,oWACA,8O,GAdaP,aCaNQ,E,iLAVX,OACE,6BAAST,UAAU,qBACjB,yBAAKU,aAAcN,KAAKC,MAAMM,aAAcC,aAAcR,KAAKC,MAAMQ,aAAcb,UAAU,OAC3F,8C,GANUC,aC6CLa,E,iLA1CX,OACE,6BAASd,UAAU,eACjB,4FACA,0BAAMe,OAAO,GAAGf,UAAU,QACxB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,sBACb,2BAAOgB,IAAI,QAAX,UACA,2BAAOC,KAAK,OACVC,KAAK,gBACLV,GAAG,OACHW,YAAY,OACZC,SAAS,OACTC,QAASjB,KAAKC,MAAMiB,cAExB,yBAAKtB,UAAU,uBACb,2BAAOgB,IAAI,SAAX,kBACA,2BACEC,KAAK,OACLC,KAAK,iBACLV,GAAG,QACHW,YAAY,eACZC,SAAS,OACTC,QAASjB,KAAKC,MAAMiB,eAG1B,yBAAKtB,UAAU,cACb,2BAAOgB,IAAI,SAAX,WACA,2BACEC,KAAK,QACLC,KAAK,iBACLV,GAAG,QACHW,YAAY,QACZC,SAAS,OACTC,QAASjB,KAAKC,MAAMiB,cAExB,4BAAQL,KAAK,SAASM,MAAM,SAASvB,UAAU,UAA/C,gB,GAtCSC,aCyBJuB,E,iLArBX,OACE,6BAASxB,UAAU,iBACjB,6CACA,wDAA8BI,KAAKC,MAAMoB,MAAzC,WACA,qEAA2CrB,KAAKC,MAAMqB,cAAtD,WACA,uDAA6BtB,KAAKC,MAAMsB,WAAa,KAAMC,QAAQ,CAAC,IAApE,gCACA,0DAAgCxB,KAAKC,MAAMwB,gBAA3C,WACA,4CAAkBzB,KAAKC,MAAMyB,eAAiB,KAAMF,QAAQ,CAAC,IAA7D,mCACA,2CACA,yDAA+BxB,KAAKC,MAAM0B,MAA1C,WACA,oDAA0B3B,KAAKC,MAAM2B,SAArC,sBACA,+EAAqD5B,KAAKC,MAAM4B,iBAAhE,WACA,wDAA8B7B,KAAKC,MAAM6B,cAAzC,gCACA,2BAAI9B,KAAKC,MAAM0B,MAAQ3B,KAAKC,MAAM8B,YAAlC,iDAA6F/B,KAAKC,MAAM8B,YAAxG,kBACA,6DAAmC/B,KAAKC,MAAM+B,cAA9C,WACA,iDAAuBhC,KAAKC,MAAMgC,aAAlC,mC,GAnBapC,aCoUNqC,G,kBA1Tb,aAAe,IAAD,8BACZ,+CAsEFC,aAAe,SAACC,GAGd,IAAIC,EAAe,GACnBD,EAAcE,QAAS,SAACC,GACtBF,EAAaG,KAAKD,EAAKE,WAIzB,IAAIC,EAAa,GACbC,EAAa,GACbC,EAAmB,GACnBC,EAAkB,GAClBC,EAAe,GACfC,EAAkB,GAClBC,EAAiB,GAYrB,SAASC,EAAMC,GAIb,OAHcA,EAAMC,OAAO,SAACC,EAAOC,GACjC,OAAOD,EAAQC,IAbnBhB,EAAaC,QAAS,SAACC,GACrBG,EAAWF,KAAKD,EAAKe,YACrBX,EAAWH,KAAKD,EAAKZ,OACrBiB,EAAiBJ,KAAKD,EAAKgB,aAC3BV,EAAgBL,KAAKD,EAAKiB,mBAC1BV,EAAaN,KAAKD,EAAKkB,iBACvBV,EAAgBP,KAAKD,EAAKmB,YAC1BV,EAAeR,KAAKD,EAAKoB,oBAW3B,IAAMC,EAAeX,EAAMN,GAErBkB,EAAeZ,EAAMP,GAErBoB,EAAqBb,EAAML,GAE3BmB,EAAuBd,EAAMJ,GAC7BmB,EAA2BC,KAAKC,MAAOH,EAAuB,KAE9DI,EAAoBlB,EAAMF,GAE1BqB,EAAsBnB,EAAMD,GAC5BqB,EAA0BJ,KAAKC,MAAOE,EAAsB,KAGlE,SAASE,EAAMjB,GACb,OAAQA,EAAMO,GAAcpC,QAAQ,CAAC,IASvC,IAPA,IAAM+C,EAAiBD,EAAMT,GACvBW,EAAyBF,EAAMR,GAC/BW,EAAyBH,EAAMN,GAC/BU,EAAsBJ,EAAMH,GAC5BQ,EAAwBL,EAAMD,GAG3BO,EAAI,EAAGA,EAAIhC,EAAiBiC,OAAQD,IACvC9B,EAAa8B,IAA6B,GAAvBhC,EAAiBgC,IACtC,EAAKE,SAAS,CACZ/C,YAAa,EAAKgD,MAAMhD,YAAc,IAM5C,EAAK+C,SAAS,CACZE,WAAYpB,EACZqB,WAAYpB,EACZjC,SAAU2C,EACV1C,iBAAkB2C,EAClB1C,cAAe2C,EACfzC,cAAe0C,EACfzC,aAAc0C,KAlJJ,EAuJdO,aAAe,WAGb,EAAKJ,SAAS,CACZxB,WAAY,EAAKyB,MAAMzB,WAAa,KA3J1B,EAiKd6B,UAAY,SAACC,GAGX,IAAIC,EAASD,EAAKE,wBAEdC,EAAeC,SAASC,gBAAgBC,aAGxCC,EAAaN,EAAOO,IAAM,GAAKP,EAAOO,IAAML,EAG5CM,EAAgBR,EAAOS,OAASP,GAAgBF,EAAOS,OAAS,EAEhEC,EAAgBV,EAAOO,IAAM,GAAKP,EAAOS,OAASP,EAGtD,OAAQI,GAAcE,GAAkBE,GAjL5B,EAqLdC,YAAc,WACZ,IAAIC,EAAUT,SAASU,eAAe,iBAClCC,EAAsB,EAAKhB,UAAUc,GACrCG,EAAmB,EAAKrB,MAAMsB,mBAGlC,IAAI,EAAKtB,MAAMuB,kBAAoBH,EAAqB,CAGtD,IAAII,EAAkBC,KAAKC,MAC3B,EAAK3B,SAAS,CACZwB,kBAAkB,EAClBC,gBAAiBA,SAGrB,GAAG,EAAKxB,MAAMuB,mBAAqBH,EAAqB,CAGtD,IAAIO,EAAiBF,KAAKC,MAC1B,EAAK3B,SAAS,CACZwB,kBAAkB,EAClBI,eAAgBA,IAIlB,IAAIC,EAAc,EAAK5B,MAAM2B,eAAiB,EAAK3B,MAAMwB,gBACzDH,EAAiB5D,KAAKmE,GAEtB,EAAK7B,SAAS,CACZuB,mBAAoBD,IAGtB,IAAMQ,EAAkB,EAAKC,gBAAgB,EAAK9B,MAAMsB,oBAClD9C,EAAc,EAAKwB,MAAMsB,mBAAmBxB,OAClD,EAAKC,SAAS,CACZgC,gBAAiBF,EACjBG,mBAAoBxD,MAzNZ,EA+NdsD,gBAAkB,SAACG,GACjB,OAAuB,GAApBA,EAAUnC,OAAoB,EAEXmC,EAAU7D,OAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQC,KAnOL,EAyOd4D,WAAa,WACX,IAAMC,EAAiBV,KAAKC,MAC5B,EAAK3B,SAAS,CACZoC,eAAgBA,KA5ON,EAiPdC,WAAa,WACX,IAAMC,EAAgBZ,KAAKC,MAGvBY,EAAmBD,EAAgB,EAAKrC,MAAMmC,eAC9CI,EAAoB,EAAKvC,MAAMuC,kBACnCA,EAAkB9E,KAAK6E,GAGvB,IAAME,EAAiB,EAAKV,gBAAgBS,GACtC5D,EAAa4D,EAAkBzC,OAErC,EAAKC,SAAS,CACZsC,cAAeA,EACfE,kBAAmBA,EACnB5F,eAAgB6F,EAChB9F,gBAAiBiC,KAjQP,EAwQdxC,WAAa,SAACsG,GAAW,IAAD,EAClBC,EAAU,EAAK1C,MAAM2C,eACrBF,EAAMG,OAAO7G,OACf2G,GAAoB,EACpBG,QAAQC,IAAIL,EAAMG,OAAO7G,KAAb,aAAmC2G,IAGjD,EAAK3C,UAAL,mBAEG0C,EAAMG,OAAO7G,KAAO0G,EAAMG,OAAOxG,OAFpC,+BAGkBsG,GAHlB,KA7QA,EAAK1C,MAAQ,CACX+C,WAAY,EACZxE,WAAY,EACZ0B,WAAY,EACZC,WAAY,EACZrD,SAAU,EACV0E,kBAAkB,EAClBC,gBAAiB,EACjBG,eAAgB,EAChBL,mBAAoB,GACpBS,gBAAiB,EACjBC,mBAAoB,EACpBlF,iBAAkB,EAClBC,cAAe,EACfC,YAAa,EACbmF,eAAgB,EAChBE,cAAe,EACfE,kBAAmB,GACnB5F,eAAgB,EAChBD,gBAAiB,EACjBO,cAAe,EACfC,aAAc,EACdyF,eAAgB,EAChBK,KAAM,IAzBI,E,iFA8BO,IAAD,OAElB/H,KAAKgG,cACLgC,OAAOC,iBAAiB,SAAUjI,KAAKgG,aAAa,GAGtC9G,EAASgJ,WAAWC,MAgBlCH,OAAOC,iBAAiB,eAAgB,SAACG,GAG9B,EAAKrD,MAAM+C,WACN,EAAK/C,MAAMzB,WACJ,EAAKyB,MAAM+B,gBACjB,EAAK/B,MAAMgC,mBACP,EAAKhC,MAAMuB,iBACV,EAAKvB,MAAMrD,eACjB,EAAKqD,MAAMtD,uBAKlB2G,EAAC,gB,+BA6NV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQlI,QAASF,KAAKkF,eACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAO3E,aAAcP,KAAKiH,WAAYxG,aAAcT,KAAKmH,aACzD,kBAAC,EAAD,CAAMjG,WAAYlB,KAAKkB,aACvB,kBAAC,EAAD,CACEG,MAAOrB,KAAK+E,MAAMzB,WAClBhC,cAAetB,KAAK+E,MAAMgC,mBAC1BxF,WAAYvB,KAAK+E,MAAM+B,gBACvBrF,gBAAiBzB,KAAK+E,MAAMtD,gBAC5BC,eAAgB1B,KAAK+E,MAAMrD,eAC3BC,MAAO3B,KAAK+E,MAAMC,WAClBpD,SAAU5B,KAAK+E,MAAMnD,SACrBC,iBAAkB7B,KAAK+E,MAAMlD,iBAC7BC,cAAe9B,KAAK+E,MAAMjD,cAC1BC,YAAa/B,KAAK+E,MAAMhD,YACxBC,cAAehC,KAAK+E,MAAM/C,cAC1BC,aAAcjC,KAAK+E,MAAM9C,oB,GAnTjBpC,cCCEwI,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlD,SAASU,eAAe,SD2H3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bedf595f.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDEhtkiZ_A4_Ki79iXutrVs_06VKGLK8R8\",\r\n    authDomain: \"lukewarm-map.firebaseapp.com\",\r\n    databaseURL: \"https://lukewarm-map.firebaseio.com\",\r\n    projectId: \"lukewarm-map\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"969126613996\",\r\n    appId: \"1:969126613996:web:a138236f3e7fae9207e6c9\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1 className=\"head1\">Lukewarm Map</h1>\r\n        <h1 className=\"head2\">LukewarmAp</h1>\r\n        <h1 className=\"head3\">LukewarmApp</h1>\r\n        <h1 className=\"head4\">Lukewarm Map App</h1>\r\n        <p>👀</p>\r\n      </header>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"buttonSection\">\r\n        <button onClick={this.props.clickFn}>Click this</button>\r\n      </section>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\nclass Scroll extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <section className=\"scrollSection\" id=\"scrollSection\">\r\n        <h2>Educated Humour</h2>\r\n        <p>The Bachelors of Fine Arts’ blend of highbrow and lowbrow is evident in one of their promotional photos, taken one Saturday afternoon in front of the Arts building. A group of young people pensively stand on the steps dressed in togas obviously made from their bed sheets, while, off to the side, two guys salaciously pose in their underwear. Naturally, the security guard chased them away immediately (partly because there was a second grade spelling bee inside).</p>\r\n        <p>As their sense of humour seems to be unwelcome on McGill grounds, the Bachelors of Fine Arts are taking to other venues – notably La Sala Rossa, where they will be performing on March 23. Formed by friends and fellow performers, the Bachelors are putting on their second show as a collective, entitled Live Miseducation II. Current McGill student and founding member Toby Houle described their clever and self-deprecating comedy as “reaching for the stars and falling in the shit.”</p>\r\n        <p>The “loose collective,” as Houle describes it, currently comprises Houle, a comedian/poet/storyteller; McGill student Asaf “Safi” Gerchak – whom Houle describes as a “comedian-raconteur;” Chris During and his power-pop band the Bawdy Electric; comedians Chason Gordon and David Heti; and writer/photographer Ariel Fournier. The group’s style is evident from the material available on their web site. In one short story by Houle, Peter O’Toole appears at a suburban housewife’s door, and proceeds to pursue and seduce her with a vigour akin to Jason in Friday the 13th. Another post, by Gerchak, appears to be an essay on existentialism but ends up rambling on about the backspace key on a keyboard, referring to it as “a horrible pit of doom.”</p>\r\n        <p>Though this will only be their second show as the Bachelors of Fine Arts, they have perfomed together numerous times, and each is established on the Montreal scene. “It happened that we were all working at a Second Cup and then we all sort of clicked as a group and it sort of snowballed from there,” said Houle. “Chris and Safi have played shows together and I have done shows with Chris. It has always been these inter-pairings of headliners with other people too, but I guess after our first show last year…we just decided that we wanted to make it more formal and just get name recognition for the collective.”</p>\r\n        <p>The three Bachelors on the bill for Tuesday evening – Houle, Gerchak, and the Bawdy Electric – will be joined by Montreal comedians George Hamilton Braithwaite, who will act as MC between sets, and multi-occasion Just for Laughs performer Mike Paterson, who will play a musical comedy set under the moniker The Dan D. Lyons. Describing how they got acquainted with the other two, Houle explains, “Safi had been performing with [Paterson] previously…. It basically just comes down to wanting to perform with your friends. You meet people you like, you really get along, and you respect what they do and love what they do and it sort of just flows both ways.”</p>\r\n        <p>Houle hopes, however, that the Bachelors of Fine Arts will be more than a comedy troupe and expand to become an art collective. “We’re sort of looking to diversify as much as possible,” says Houle. “In a perfect world, for example, one week there’d be a photo exposition that the Bawdy Electric might play at and the next week there’d be a comedy show with someone’s paintings in the front foyer. That kind of intermarriage would be ideal…. That’s what we’re shooting for as we keep cherry picking people from around.”</p>\r\n        <p>In the meantime, each member will stick to his forte for the upcoming show – Gershak will perform stand-up comedy, Houle will recite original comedic folk tales, and During’s band, the Bawdy Electric, will play a set. However, each will try to come up with something unique and different from his previous performances. “It’s just not possible to do the same thing over and over again. I think we’re all just really restless souls in that regard…. We’re always just trying to shake it up and set ourselves different challenges and every time beat those,” said Houle.</p>\r\n        <p>At a Bachelors show, the comedy arises from the clash of the Bachelors’ serious art collective intentions and sensibilities with their self-deprecating and campy shtick. Tomorrow night, they’ll reach for the pinnacles of the Attic Greeks while falling into the shit and getting their underwear and bed sheets dirty.</p>\r\n        <p>The Bachelors of Fine Arts will be performing tomorrow night at 8 p.m. at Sala Rossa (4848 St. Laurent). Visit bachelorsoffinearts.wordpress.com for the group’s work and information about the show.</p>\r\n      </section>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass Hover extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"hoverSection flex\">\r\n        <div onMouseEnter={this.props.mouseEnterFn} onMouseLeave={this.props.mouseLeaveFn} className=\"box\">\r\n          <p>Hover Me!</p>\r\n        </div>\r\n      </section>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Hover;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"formSection\">\r\n        <h2>This form has absolutely no meaning, but fill it out anyways</h2>\r\n        <form action=\"\" className=\"flex\">\r\n          <div className=\"half flex\">\r\n            <div className=\"formNameField flex\">\r\n              <label for=\"name\">* Name</label>\r\n              <input type=\"text\" \r\n                name=\"formEntryName\" \r\n                id=\"name\" \r\n                placeholder=\"Name\" \r\n                required=\"true\"\r\n                onKeyUp={this.props.formTyping}/>\r\n            </div>\r\n            <div className=\"formPhoneField flex\">\r\n              <label for=\"phone\">* Phone Number</label>\r\n              <input \r\n                type=\"text\" \r\n                name=\"formEntryPhone\" \r\n                id=\"phone\" \r\n                placeholder=\"Phone Number\" \r\n                required=\"true\"\r\n                onKeyUp={this.props.formTyping}/>\r\n  \t\t\t\t\t</div>\r\n          </div>\r\n          <div className=\"email flex\">\r\n            <label for=\"email\">* Email</label>\r\n            <input \r\n              type=\"email\" \r\n              name=\"formEntryEmail\" \r\n              id=\"email\" \r\n              placeholder=\"Email\" \r\n              required=\"true\"\r\n              onKeyUp={this.props.formTyping}/>\r\n          </div>\r\n          <button type=\"submit\" value=\"Submit\" className=\"submit\">Submit</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass Result extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"resultSection\">\r\n        <h2>Your session:</h2>\r\n        <p>You've clicked the button {this.props.click} times.</p>\r\n        <p>You've scrolled through Safi's article {this.props.scrollThrough} times.</p>\r\n        <p>You've spent a total of {(this.props.scrollTime / 1000).toFixed([2])} seconds reading about Safi.</p>\r\n        <p>You've hovered over the box {this.props.totalHoverCount} times.</p>\r\n        <p>You've spent {(this.props.totalHoverTime / 1000).toFixed([2])} seconds hovering over the box.</p>\r\n        <h2>On Average:</h2>\r\n        <p>This page has been visited {this.props.visit} times.</p>\r\n        <p>The button is clicked {this.props.avgClick} times on average.</p>\r\n        <p>The average person scroll through Safi's article {this.props.avgScrollThrough} times.</p>\r\n        <p>The average person spends {this.props.avgScrollTime} seconds reading about Safi.</p>\r\n        <p>{this.props.visit - this.props.exitMidPage} people actually made it through the article. {this.props.exitMidPage} did not care.</p>\r\n        <p>On average, the box is hovered {this.props.avgHoverCount} times.</p>\r\n        <p>People spend about {this.props.avgHoverTime} seconds hovering the box.</p>\r\n      </section>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport firebase from './components/firebase';\nimport Header from './components/Header';\nimport Button from './components/Button';\nimport Scroll from './components/Scroll';\nimport Hover from './components/Hover';\nimport Form from './components/Form';\nimport Result from './components/Result';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      visitCount: 1, //every session is a visit count\n      clickCount: 0, //click count per session\n      totalVisit: 0, //data from FB (dataAnalysis fn)\n      totalClick: 0, //data from FB (dataAnalysis fn)\n      avgClick: 0, //data from FB (dataAnalysis fn)\n      lastSectionState: false, //check scroll location\n      scrollEntryTime: 0, //time user enter scroll section\n      scrollExitTime: 0, //time user exit scroll section\n      scrollElapsedArray: [], //record each time difference user enter and exit scroll section\n      totalScrollTime: 0, //sum of values in scrollElapsedArray\n      totalScrollThrough: 0, //length of values in scrollElapsedArray\n      avgScrollThrough: 0, //data from FB (dataAnalysis fn)\n      avgScrollTime: 0, //data from FB (dataAnalysis fn)\n      exitMidPage: 0, //data from FB (dataAnalysis fn)\n      hoverEntryTime: 0, //time user mouse enter box\n      hoverExitTime: 0, //time user mouse leave box\n      hoverElapsedArray: [], //record each time difference user enter and exit hover box\n      totalHoverTime: 0, //sum of values in hoverElapsedArray\n      totalHoverCount: 0, //length of values in scrollElapsedArray\n      avgHoverCount: 0, //data from FB (dataAnalysis fn)\n      avgHoverTime: 0, //data from FB (dataAnalysis fn)\n      keystrokeCount: 0,\n      form: {},\n    }\n  }\n\n  //things that needs to happen on page load goes here\n  componentDidMount() {\n\n    this.showVisible();\n    window.addEventListener(\"scroll\", this.showVisible, false);\n\n    // connecting firebase with react\n    const dbRef = firebase.database().ref();\n    \n    // dbRef.on('value', (data) => {\n      \n    //   //grab the data from FB, return an object\n    //   data = data.val();\n      \n    //   //go through this object, and turn it into an array \n    //   const fbValuesArray = Object.values(data);\n      \n    //   //pass this data to data analysis function\n    //   this.dataAnalysis(fbValuesArray)\n\n    // })\n\n    //upload data collected to firebase before user refreshes or close the page\n    window.addEventListener('beforeunload', (e) => {\n\n      const session = {\n        visit: this.state.visitCount,\n        clickCount: this.state.clickCount,\n        scrollTimeElapsed: this.state.totalScrollTime,\n        scrollCount: this.state.totalScrollThrough,\n        didExitInScroll: this.state.lastSectionState,\n        hoverTimeElapsed: this.state.totalHoverTime,\n        hoverCount: this.state.totalHoverCount\n      }\n      // dbRef.push({session});\n\n      //beforeunload needs to return something, so delete the return to work in chrome\n      delete e['returnValue'];\n    })\n  }\n  \n  //analyze data from FB\n  dataAnalysis = (fbValuesArray) => {\n\n    //only want data in the session object\n    let sessionArray = [];\n    fbValuesArray.forEach( (item) => {\n      sessionArray.push(item.session);\n    })\n\n    //extracting data from sessions\n    let clickArray = [];\n    let visitArray = [];\n    let scrollCountArray = [];\n    let scrollTimeArray = [];\n    let readingArray = [];\n    let hoverCountArray = [];\n    let hoverTimeArray = [];\n    sessionArray.forEach( (item) => {\n      clickArray.push(item.clickCount);\n      visitArray.push(item.visit);\n      scrollCountArray.push(item.scrollCount);\n      scrollTimeArray.push(item.scrollTimeElapsed);\n      readingArray.push(item.didExitInScroll);\n      hoverCountArray.push(item.hoverCount);\n      hoverTimeArray.push(item.hoverTimeElapsed);\n    })\n\n    //total up the data\n    function addFn(array) {\n      const value = array.reduce((total, num) => {\n        return total + num;\n      })\n      return value;\n    }\n    //visitor total\n    const fbVisitTotal = addFn(visitArray);\n    //click total\n    const fbClickTotal = addFn(clickArray);\n    //scroll count total\n    const fbScrollCountTotal = addFn(scrollCountArray);\n    //scrolling time elapsed total\n    const fbScrollElapsedTotal = addFn(scrollTimeArray);\n    const fbScrollElapsedFormatted = Math.floor((fbScrollElapsedTotal / 1000));\n    //hover count total\n    const fbHoverCountTotal = addFn(hoverCountArray);\n    //hovering time elapsed total\n    const fbHoverElapsedTotal = addFn(hoverTimeArray);\n    const fbHoverElapsedFormatted = Math.floor((fbHoverElapsedTotal / 1000));\n\n    //average calculations\n    function avgFn(num) {\n      return (num / fbVisitTotal).toFixed([2]);\n    }\n    const fbAverageClick = avgFn(fbClickTotal);\n    const fbAverageScrollThrough = avgFn(fbScrollCountTotal);\n    const fbAverageScrollElapsed = avgFn(fbScrollElapsedFormatted);\n    const fbAverageHoverCount = avgFn(fbHoverCountTotal);\n    const fbAverageHoverElapsed = avgFn(fbHoverElapsedFormatted);\n\n    //determine if user finish reading\n    for (let i = 0; i < scrollCountArray.length; i++) {\n      if (readingArray[i] && scrollCountArray[i] == 0) {\n        this.setState({\n          exitMidPage: this.state.exitMidPage + 1,\n        })\n      }\n    }\n\n    // store the totals in state, to be rendered in results section\n    this.setState({\n      totalVisit: fbVisitTotal,\n      totalClick: fbClickTotal,\n      avgClick: fbAverageClick,\n      avgScrollThrough: fbAverageScrollThrough,\n      avgScrollTime: fbAverageScrollElapsed,\n      avgHoverCount: fbAverageHoverCount,\n      avgHoverTime: fbAverageHoverElapsed,\n    })\n  }\n  //-------------Click section functions here ------------------\n  //count button clicks\n  clickCounter = () => {\n\n    //each time the button is clicked, record it locally first\n    this.setState({\n      clickCount: this.state.clickCount + 1,\n    })\n  }\n\n  //-------------Scroll section functions here ------------------\n  //see if scroll section is in the viewport\n  isVisible = (elem) => {\n\n    //find the element's relative position to viewport\n    let coords = elem.getBoundingClientRect();\n\n    let windowHeight = document.documentElement.clientHeight;\n\n    // top elem edge is visible?\n    let topVisible = coords.top > 0 && coords.top < windowHeight;\n\n    // bottom elem edge is visible?\n    let bottomVisible = coords.bottom < windowHeight && coords.bottom > 0;\n\n    let middleVisible = coords.top < 0 && coords.bottom > windowHeight;\n\n    //do something only if scroll section is visible \n    return (topVisible || bottomVisible) || middleVisible;\n  }\n\n  //if scroll section is visible, do this\n  showVisible = () => {\n    let section = document.getElementById('scrollSection');\n    let currentSectionState = this.isVisible(section);\n    let elapsedTimeArray = this.state.scrollElapsedArray; \n    \n    // you weren't in the section and now you are\n    if(!this.state.lastSectionState && currentSectionState) {\n\n      //record the entry time\n      let scrollEntryTime = Date.now();\n      this.setState({\n        lastSectionState: true,\n        scrollEntryTime: scrollEntryTime,\n      })\n    } else // you were in the section, and now you aren't\n    if(this.state.lastSectionState && !currentSectionState) { \n\n      // record the exit time\n      let scrollExitTime = Date.now();\n      this.setState({\n        lastSectionState: false,\n        scrollExitTime: scrollExitTime,\n      })\n\n      //calculate time span for each entry and exit\n      let elapsedTime = this.state.scrollExitTime - this.state.scrollEntryTime;\n      elapsedTimeArray.push(elapsedTime);\n      \n      this.setState({\n        scrollElapsedArray: elapsedTimeArray,\n      })\n\n      const scrollSpanTotal = this.timeSpanCounter(this.state.scrollElapsedArray);\n      const scrollCount = this.state.scrollElapsedArray.length;\n      this.setState({\n        totalScrollTime: scrollSpanTotal,\n        totalScrollThrough: scrollCount,\n      })\n    }\n  }\n\n  //calculate total time span\n  timeSpanCounter = (timeArray) => {\n    if(timeArray.length == 0) return 0;\n    \n    const timeSpanTotal = timeArray.reduce((total, num) => {\n      return total + num;\n    })\n    return timeSpanTotal\n  }\n  //-------------Hover section functions here ------------------\n  //on mouse enter, grab current time\n  mouseEnter = () => {\n    const hoverEntryTime = Date.now();\n    this.setState({\n      hoverEntryTime: hoverEntryTime,\n    })\n  }\n\n  //on mouse leave, grab current time\n  mouseLeave = () => {\n    const hoverExitTime = Date.now();\n    \n    //calculate the difference b/t entry and exit, and record the difference in an array\n    let hoverElapsedTime = hoverExitTime - this.state.hoverEntryTime;\n    let hoverElapsedArray = this.state.hoverElapsedArray;\n    hoverElapsedArray.push(hoverElapsedTime)\n\n    //re-use timeSpanCounter calculator function\n    const hoverSpanTotal = this.timeSpanCounter(hoverElapsedArray);\n    const hoverCount = hoverElapsedArray.length;\n\n    this.setState({\n      hoverExitTime: hoverExitTime,\n      hoverElapsedArray: hoverElapsedArray,\n      totalHoverTime: hoverSpanTotal,\n      totalHoverCount: hoverCount,\n    })\n  }\n  //-------------Form section functions here ------------------\n  //record if user input anything in the form\n  //input watch change on each field\n  //record to state\n  formTyping = (event) => {\n    let isTyped = this.state.keystrokeCount;\n    if (event.target.name) {\n      isTyped = isTyped + 1;\n      console.log(event.target.name + ` is typed ` + isTyped)\n    }\n    //write an object literal, with the field name as key and istyped as value, then push it to the form object in state\n    this.setState({\n      //multiple inputs, give the fields a different name, and track the changes by the name\n      [event.target.name]: event.target.value,\n      keystrokeCount: isTyped,\n    })\n  }\n\n\n\n  // Activate only in emergency situation, like putting the database in an infinite loop\n  // removeData = () => {\n  //   const dbRef = firebase.database().ref();\n  //   dbRef.remove();\n  // }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Button clickFn={this.clickCounter} />\n        <Scroll />\n        <Hover mouseEnterFn={this.mouseEnter} mouseLeaveFn={this.mouseLeave}/>\n        <Form formTyping={this.formTyping}/>\n        <Result \n          click={this.state.clickCount} \n          scrollThrough={this.state.totalScrollThrough}\n          scrollTime={this.state.totalScrollTime}\n          totalHoverCount={this.state.totalHoverCount}\n          totalHoverTime={this.state.totalHoverTime}\n          visit={this.state.totalVisit} \n          avgClick={this.state.avgClick}\n          avgScrollThrough={this.state.avgScrollThrough}\n          avgScrollTime={this.state.avgScrollTime}\n          exitMidPage={this.state.exitMidPage}\n          avgHoverCount={this.state.avgHoverCount}\n          avgHoverTime={this.state.avgHoverTime}\n        />\n        {/* ONLY ACTIVATE IF YOU REALLY FUCKED UP <button onClick={this.removeData}>Shit happened</button> */}\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}